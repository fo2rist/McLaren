apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.7'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*'] // fix for crash in jacoco https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

final SOURCE_DIRS = "$project.projectDir/src/main/java"

task jacocoTestDebugUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Code Coverage"
    description = "Generate coverage report for all unit test, analogue of createDebugCoverageReport"

    def coverageSourceDirs = [
            SOURCE_DIRS
    ]

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*'
    ]

    def javaClasses = fileTree(
            dir: "$buildDir/intermediates/javac/debug",
            excludes: fileFilter
    )
    def kotlinClasses = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter
    )

    getClassDirectories().setFrom(files([javaClasses], [kotlinClasses]))
    getAdditionalClassDirs().setFrom(files(coverageSourceDirs))
    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",                                // unit tests
            'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec' // UI tests
    ]))

    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }
}

coveralls {
    jacocoReportPath "$buildDir/reports/jacoco/jacocoTestDebugUnitTestReport/jacocoTestDebugUnitTestReport.xml"
    sourceDirs = [SOURCE_DIRS]
}
