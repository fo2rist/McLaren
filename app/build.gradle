buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION
    buildToolsVersion project.BUILD_TOOLS_VERSION

    def properties = readProperties("env/mclaren.properties")

    defaultConfig {
        applicationId "com.github.fo2rist.mclaren"
        targetSdkVersion project.TARGET_SDK_VERSION
        minSdkVersion project.MIN_SDK_VERSION
        versionCode 7
        versionName "1.1.0"
        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [crashlyticsKey: readProperty(properties, 'CRASHLYTICS_KEY')]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warningsAsErrors false
        abortOnError true
        htmlReport true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    applicationVariants.all { variant ->
        setConfigProperty(variant, properties, 'MCLAREN_FEED_URL')
        setConfigProperty(variant, properties, 'MCLAREN_RACE_INFO_URL')
        setConfigProperty(variant, properties, 'MCLAREN_RACE_LIFE_DATA_URL')
        setConfigProperty(variant, properties, 'MCLAREN_CDN_AUTH')
        setConfigProperty(variant, properties, 'MCLAREN_TAB_API_AUTH')
        setConfigProperty(variant, properties, 'STORYSTREAM_FEED_URL')
        setConfigProperty(variant, properties, 'STORYSTREAM_TOKEN')
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$project.supportVersion"
    implementation "com.android.support:cardview-v7:$project.supportVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:design:$project.supportVersion"
    implementation "com.android.support:recyclerview-v7:$project.supportVersion"
    implementation "com.android.support:support-v4:$project.supportVersion"

    // zoom image view
    implementation 'com.github.chrisbanes:PhotoView:2.0.0'

    // autolink for text view embedded links
    implementation 'com.github.armcha:AutoLinkTextView:0.3.0'

    // networking
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'

    // event bus
    implementation 'org.greenrobot:eventbus:3.0.0'

    // joda time
    implementation 'joda-time:joda-time:2.9.9'

    // logger
    implementation 'com.jakewharton.timber:timber:4.5.1'

    // crashlytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.0@aar') {
        transitive = true;
    }

    // dependency injection
    implementation 'com.google.dagger:dagger-android-support:2.14.1', {
        exclude group: 'com.google.code.findbugs'
    }
    annotationProcessor 'com.google.dagger:dagger-compiler:2.14.1'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.14.1'

    // test libraries
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.13.0'
    testImplementation 'org.robolectric:robolectric:3.7.1'
    testImplementation 'org.robolectric:shadows-support-v4:3.3.2'

    // instrumented test libraries
    androidTestImplementation "com.android.support:support-annotations:$project.supportVersion"
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support'
    }
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.1', {
        exclude group: 'com.android.support'
    }
    androidTestImplementation 'com.android.support.test.espresso:espresso-web:3.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.1'
}

/**
 * Load bunc of properties from file.
 * @return {@link Properties}
 */
def readProperties(configFileName) {
    def properties = new Properties()
    try {
        properties.load(new FileInputStream(rootProject.file(configFileName)))
        println "Load properties from configuration file"
    } catch (IOException any) {
        println "Properties file ${configFileName} not found will use ENV variabled."
    }
    return properties
}

/**
 * Set build config variable by name.
 * Check properties file first, then ENV, set "null" if not found.
 */
static def setConfigProperty(variant, Properties properties, String propertyName) {
    def propertyValue = readProperty(properties, propertyName)
    variant.buildConfigField "String", propertyName, wrapString(propertyValue)
    if (propertyValue == null)
        System.err.println "Property ${propertyName} not found and set to null for variant ${variant.name}"
}

private static String readProperty(final Properties properties, String propertyName) {
    return properties.getProperty(propertyName) ?: System.getenv(propertyName)
}

/** Wrap string var to be used as string literal in java code. */
static def wrapString(stringVar) {
    return "\"${stringVar}\""
}
