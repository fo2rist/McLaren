apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply from: '../versions.gradle'
apply from: '../jacoco.gradle'

buildscript { //for crashlytics
    repositories {
    }

    dependencies {
    }
}

android {
    signingConfigs {
        test_sign_config {
            keyAlias 'testing'
            keyPassword 'testing'
            storeFile rootProject.file('testing_dummy_key')
            storePassword 'testing'
        }
    }

    compileSdkVersion project.COMPILE_SDK_VERSION
    buildToolsVersion project.BUILD_TOOLS_VERSION
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    def properties = readProperties("env/mclaren.properties")

    defaultConfig {
        applicationId "com.github.fo2rist.mclaren"

        targetSdkVersion project.TARGET_SDK_VERSION
        minSdkVersion project.MIN_SDK_VERSION
        versionCode project.APP_VERSION_CODE
        versionName project.APP_VERSION_NAME

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.test_sign_config
        }
        debug {
            // Disable fabric build ID generation for debug builds
            ext.enableCrashlytics = false
            testCoverageEnabled true
        }
    }

    lintOptions {
        warningsAsErrors false
        abortOnError true
        htmlReport true
        baseline file("lint-baseline.xml")
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }

    applicationVariants.all { variant ->
        setConfigProperty(variant, properties, 'MCLAREN_FEED_URL')
        setConfigProperty(variant, properties, 'MCLAREN_RACE_INFO_URL')
        setConfigProperty(variant, properties, 'MCLAREN_RACE_LIFE_DATA_URL')
        setConfigProperty(variant, properties, 'MCLAREN_CDN_AUTH')
        setConfigProperty(variant, properties, 'MCLAREN_TAB_API_AUTH')
        setConfigProperty(variant, properties, 'STORYSTREAM_FEED_URL')
        setConfigProperty(variant, properties, 'STORYSTREAM_TOKEN')
        setConfigProperty(variant, properties, 'TWITTER_CONSUMER_KEY')
        setConfigProperty(variant, properties, 'TWITTER_CONSUMER_SECRET')
        setConfigProperty(variant, properties, 'TWITTER_ACCESS_TOKEN')
        setConfigProperty(variant, properties, 'TWITTER_ACCESS_TOKEN_SECRET')
    }
}

dependencies {
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "com.google.android.material:material:1.3.0"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$KOTLIN_VERSION"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0"

    // firebase cloud config, crashlytics & analytics
    implementation 'com.google.firebase:firebase-config:19.2.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.0.1'
    implementation 'com.google.firebase:firebase-analytics:19.0.0'

    //twitter client
    implementation "org.twitter4j:twitter4j-core:4.0.7"

    // zoom image view
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    // auto link for text view embedded links
    implementation 'com.github.armcha:AutoLinkTextViewV2:3.0.0'
    // dot indicator view
    implementation 'me.relex:circleindicator:2.1.6'

    // networking
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'
    implementation 'com.squareup.picasso:picasso:2.5.2' // 2.71828 uses support lib 27.1.0 incompatible with 27.1.1
                                                        // 2.8 doesn't load some images,
    implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'

    // event bus
    implementation 'org.greenrobot:eventbus:3.2.0'
    kapt 'org.greenrobot:eventbus-annotation-processor:3.2.0' // for compile time discovery

    // joda time
    implementation 'joda-time:joda-time:2.10.3'

    // logger
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // dependency injection
    implementation 'com.google.dagger:dagger-android-support:2.37'
    kapt 'com.google.dagger:dagger-compiler:2.37'
    kapt 'com.google.dagger:dagger-android-processor:2.37'

    // test libraries
    // must be included into app sources despite it's used for testing only.
    // https://issuetracker.google.com/issues/128612536
    debugImplementation 'androidx.fragment:fragment-testing:1.2.5'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation 'com.agoda.kakao:kakao:2.4.0'

    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.7.7'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation('org.robolectric:robolectric:4.3.1') {
        // https://github.com/robolectric/robolectric/issues/5245
        exclude group: 'com.google.auto.service', module: 'auto-service'
    }

    // instrumented test libraries
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation "androidx.annotation:annotation:1.1.0"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'

    androidTestImplementation 'com.agoda.kakao:kakao:2.4.0'
    androidTestImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
}

kapt {
    arguments {
        arg('eventBusIndex', 'com.github.fo2rist.mclaren.AutogeneratedEventBusIndex')
    }
}

/**
 * Load bunc of properties from file.
 * @return {@link Properties}
 */
def readProperties(configFileName) {
    def properties = new Properties()
    try {
        properties.load(new FileInputStream(rootProject.file(configFileName)))
        println "Load properties from configuration file"
    } catch (IOException ignore) {
        println "Properties file ${configFileName} not found. Will use ENV variables."
    }
    return properties
}

/**
 * Set build config variable by name.
 * Check properties file first, then ENV, set "null" if not found.
 */
static def setConfigProperty(variant, Properties properties, String propertyName) {
    def propertyValue = readProperty(properties, propertyName)
    variant.buildConfigField "String", propertyName, wrapString(propertyValue)
    if (propertyValue == null)
        System.err.println "Property ${propertyName} not found and set to null for variant ${variant.name}"
}

private static String readProperty(final Properties properties, String propertyName) {
    return properties.getProperty(propertyName) ?: System.getenv(propertyName)
}

/** Wrap string var to be used as string literal in java code. */
static def wrapString(stringVar) {
    return "\"${stringVar}\""
}
